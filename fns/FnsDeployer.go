// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fns

import (
	"math/big"
	"strings"

	"git.storeros.com/storeros/bcos-sdk/abi"
	"git.storeros.com/storeros/bcos-sdk/abi/bind"
	"git.storeros.com/storeros/bcos-sdk/core/types"
	"git.storeros.com/storeros/bcos-sdk/event"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// FnsABI is the input ABI used to generate the binding from.
const FnsABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDR_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVERSE_REGISTRAR_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TLD_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"keccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"makeCommitmentWithConfig\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"namehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerWithConfig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"}],\"name\":\"setCommitmentAges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractPriceOracle\",\"name\":\"_prices\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// FnsBin is the compiled bytecode used for deploying new contracts.
var FnsBin = ""

// DeployFns deploys a new contract, binding an instance of Fns to it.
func DeployFns(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Fns, error) {
	parsed, err := abi.JSON(strings.NewReader(FnsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FnsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Fns{FnsCaller: FnsCaller{contract: contract}, FnsTransactor: FnsTransactor{contract: contract}, FnsFilterer: FnsFilterer{contract: contract}}, nil
}

func AsyncDeployFns(auth *bind.TransactOpts, handler func(*types.Receipt, error), backend bind.ContractBackend) (*types.Transaction, error) {
	parsed, err := abi.JSON(strings.NewReader(FnsABI))
	if err != nil {
		return nil, err
	}

	tx, err := bind.AsyncDeployContract(auth, handler, parsed, common.FromHex(FnsBin), backend)
	if err != nil {
		return nil, err
	}
	return tx, nil
}

// Fns is an auto generated Go binding around a Solidity contract.
type Fns struct {
	FnsCaller     // Read-only binding to the contract
	FnsTransactor // Write-only binding to the contract
	FnsFilterer   // Log filterer for contract events
}

// FnsCaller is an auto generated read-only Go binding around a Solidity contract.
type FnsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FnsTransactor is an auto generated write-only Go binding around a Solidity contract.
type FnsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FnsFilterer is an auto generated log filtering Go binding around a Solidity contract events.
type FnsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FnsSession is an auto generated Go binding around a Solidity contract,
// with pre-set call and transact options.
type FnsSession struct {
	Contract     *Fns              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FnsCallerSession is an auto generated read-only Go binding around a Solidity contract,
// with pre-set call options.
type FnsCallerSession struct {
	Contract *FnsCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// FnsTransactorSession is an auto generated write-only Go binding around a Solidity contract,
// with pre-set transact options.
type FnsTransactorSession struct {
	Contract     *FnsTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FnsRaw is an auto generated low-level Go binding around a Solidity contract.
type FnsRaw struct {
	Contract *Fns // Generic contract binding to access the raw methods on
}

// FnsCallerRaw is an auto generated low-level read-only Go binding around a Solidity contract.
type FnsCallerRaw struct {
	Contract *FnsCaller // Generic read-only contract binding to access the raw methods on
}

// FnsTransactorRaw is an auto generated low-level write-only Go binding around a Solidity contract.
type FnsTransactorRaw struct {
	Contract *FnsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFns creates a new instance of Fns, bound to a specific deployed contract.
func NewFns(address common.Address, backend bind.ContractBackend) (*Fns, error) {
	contract, err := bindFns(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Fns{FnsCaller: FnsCaller{contract: contract}, FnsTransactor: FnsTransactor{contract: contract}, FnsFilterer: FnsFilterer{contract: contract}}, nil
}

// NewFnsCaller creates a new read-only instance of Fns, bound to a specific deployed contract.
func NewFnsCaller(address common.Address, caller bind.ContractCaller) (*FnsCaller, error) {
	contract, err := bindFns(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FnsCaller{contract: contract}, nil
}

// NewFnsTransactor creates a new write-only instance of Fns, bound to a specific deployed contract.
func NewFnsTransactor(address common.Address, transactor bind.ContractTransactor) (*FnsTransactor, error) {
	contract, err := bindFns(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FnsTransactor{contract: contract}, nil
}

// NewFnsFilterer creates a new log filterer instance of Fns, bound to a specific deployed contract.
func NewFnsFilterer(address common.Address, filterer bind.ContractFilterer) (*FnsFilterer, error) {
	contract, err := bindFns(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FnsFilterer{contract: contract}, nil
}

// bindFns binds a generic wrapper to an already deployed contract.
func bindFns(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FnsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Fns *FnsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Fns.Contract.FnsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Fns *FnsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.FnsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Fns *FnsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.FnsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Fns *FnsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Fns.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Fns *FnsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Fns *FnsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.contract.Transact(opts, method, params...)
}

// ADDRLABEL is a free data retrieval call binding the contract method 0x9368678f.
//
// Solidity: function ADDR_LABEL() constant returns(bytes32)
func (_Fns *FnsCaller) ADDRLABEL(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "ADDR_LABEL")
	return *ret0, err
}

// ADDRLABEL is a free data retrieval call binding the contract method 0x9368678f.
//
// Solidity: function ADDR_LABEL() constant returns(bytes32)
func (_Fns *FnsSession) ADDRLABEL() ([32]byte, error) {
	return _Fns.Contract.ADDRLABEL(&_Fns.CallOpts)
}

// ADDRLABEL is a free data retrieval call binding the contract method 0x9368678f.
//
// Solidity: function ADDR_LABEL() constant returns(bytes32)
func (_Fns *FnsCallerSession) ADDRLABEL() ([32]byte, error) {
	return _Fns.Contract.ADDRLABEL(&_Fns.CallOpts)
}

// MINREGISTRATIONDURATION is a free data retrieval call binding the contract method 0x8a95b09f.
//
// Solidity: function MIN_REGISTRATION_DURATION() constant returns(uint256)
func (_Fns *FnsCaller) MINREGISTRATIONDURATION(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "MIN_REGISTRATION_DURATION")
	return *ret0, err
}

// MINREGISTRATIONDURATION is a free data retrieval call binding the contract method 0x8a95b09f.
//
// Solidity: function MIN_REGISTRATION_DURATION() constant returns(uint256)
func (_Fns *FnsSession) MINREGISTRATIONDURATION() (*big.Int, error) {
	return _Fns.Contract.MINREGISTRATIONDURATION(&_Fns.CallOpts)
}

// MINREGISTRATIONDURATION is a free data retrieval call binding the contract method 0x8a95b09f.
//
// Solidity: function MIN_REGISTRATION_DURATION() constant returns(uint256)
func (_Fns *FnsCallerSession) MINREGISTRATIONDURATION() (*big.Int, error) {
	return _Fns.Contract.MINREGISTRATIONDURATION(&_Fns.CallOpts)
}

// RESOLVERLABEL is a free data retrieval call binding the contract method 0x5ecb2502.
//
// Solidity: function RESOLVER_LABEL() constant returns(bytes32)
func (_Fns *FnsCaller) RESOLVERLABEL(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "RESOLVER_LABEL")
	return *ret0, err
}

// RESOLVERLABEL is a free data retrieval call binding the contract method 0x5ecb2502.
//
// Solidity: function RESOLVER_LABEL() constant returns(bytes32)
func (_Fns *FnsSession) RESOLVERLABEL() ([32]byte, error) {
	return _Fns.Contract.RESOLVERLABEL(&_Fns.CallOpts)
}

// RESOLVERLABEL is a free data retrieval call binding the contract method 0x5ecb2502.
//
// Solidity: function RESOLVER_LABEL() constant returns(bytes32)
func (_Fns *FnsCallerSession) RESOLVERLABEL() ([32]byte, error) {
	return _Fns.Contract.RESOLVERLABEL(&_Fns.CallOpts)
}

// REVERSEREGISTRARLABEL is a free data retrieval call binding the contract method 0x7d70c659.
//
// Solidity: function REVERSE_REGISTRAR_LABEL() constant returns(bytes32)
func (_Fns *FnsCaller) REVERSEREGISTRARLABEL(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "REVERSE_REGISTRAR_LABEL")
	return *ret0, err
}

// REVERSEREGISTRARLABEL is a free data retrieval call binding the contract method 0x7d70c659.
//
// Solidity: function REVERSE_REGISTRAR_LABEL() constant returns(bytes32)
func (_Fns *FnsSession) REVERSEREGISTRARLABEL() ([32]byte, error) {
	return _Fns.Contract.REVERSEREGISTRARLABEL(&_Fns.CallOpts)
}

// REVERSEREGISTRARLABEL is a free data retrieval call binding the contract method 0x7d70c659.
//
// Solidity: function REVERSE_REGISTRAR_LABEL() constant returns(bytes32)
func (_Fns *FnsCallerSession) REVERSEREGISTRARLABEL() ([32]byte, error) {
	return _Fns.Contract.REVERSEREGISTRARLABEL(&_Fns.CallOpts)
}

// TLDLABEL is a free data retrieval call binding the contract method 0xd1131c72.
//
// Solidity: function TLD_LABEL() constant returns(bytes32)
func (_Fns *FnsCaller) TLDLABEL(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "TLD_LABEL")
	return *ret0, err
}

// TLDLABEL is a free data retrieval call binding the contract method 0xd1131c72.
//
// Solidity: function TLD_LABEL() constant returns(bytes32)
func (_Fns *FnsSession) TLDLABEL() ([32]byte, error) {
	return _Fns.Contract.TLDLABEL(&_Fns.CallOpts)
}

// TLDLABEL is a free data retrieval call binding the contract method 0xd1131c72.
//
// Solidity: function TLD_LABEL() constant returns(bytes32)
func (_Fns *FnsCallerSession) TLDLABEL() ([32]byte, error) {
	return _Fns.Contract.TLDLABEL(&_Fns.CallOpts)
}

// Available is a free data retrieval call binding the contract method 0xaeb8ce9b.
//
// Solidity: function available(string name) constant returns(bool)
func (_Fns *FnsCaller) Available(opts *bind.CallOpts, name string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "available", name)
	return *ret0, err
}

// Available is a free data retrieval call binding the contract method 0xaeb8ce9b.
//
// Solidity: function available(string name) constant returns(bool)
func (_Fns *FnsSession) Available(name string) (bool, error) {
	return _Fns.Contract.Available(&_Fns.CallOpts, name)
}

// Available is a free data retrieval call binding the contract method 0xaeb8ce9b.
//
// Solidity: function available(string name) constant returns(bool)
func (_Fns *FnsCallerSession) Available(name string) (bool, error) {
	return _Fns.Contract.Available(&_Fns.CallOpts, name)
}

// Commitments is a free data retrieval call binding the contract method 0x839df945.
//
// Solidity: function commitments(bytes32 ) constant returns(uint256)
func (_Fns *FnsCaller) Commitments(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "commitments", arg0)
	return *ret0, err
}

// Commitments is a free data retrieval call binding the contract method 0x839df945.
//
// Solidity: function commitments(bytes32 ) constant returns(uint256)
func (_Fns *FnsSession) Commitments(arg0 [32]byte) (*big.Int, error) {
	return _Fns.Contract.Commitments(&_Fns.CallOpts, arg0)
}

// Commitments is a free data retrieval call binding the contract method 0x839df945.
//
// Solidity: function commitments(bytes32 ) constant returns(uint256)
func (_Fns *FnsCallerSession) Commitments(arg0 [32]byte) (*big.Int, error) {
	return _Fns.Contract.Commitments(&_Fns.CallOpts, arg0)
}

// Keccak is a free data retrieval call binding the contract method 0x8f9e1a5d.
//
// Solidity: function keccak(string name) constant returns(bytes32)
func (_Fns *FnsCaller) Keccak(opts *bind.CallOpts, name string) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "keccak", name)
	return *ret0, err
}

// Keccak is a free data retrieval call binding the contract method 0x8f9e1a5d.
//
// Solidity: function keccak(string name) constant returns(bytes32)
func (_Fns *FnsSession) Keccak(name string) ([32]byte, error) {
	return _Fns.Contract.Keccak(&_Fns.CallOpts, name)
}

// Keccak is a free data retrieval call binding the contract method 0x8f9e1a5d.
//
// Solidity: function keccak(string name) constant returns(bytes32)
func (_Fns *FnsCallerSession) Keccak(name string) ([32]byte, error) {
	return _Fns.Contract.Keccak(&_Fns.CallOpts, name)
}

// MakeCommitment is a free data retrieval call binding the contract method 0xf49826be.
//
// Solidity: function makeCommitment(string name, address owner, bytes32 secret) constant returns(bytes32)
func (_Fns *FnsCaller) MakeCommitment(opts *bind.CallOpts, name string, owner common.Address, secret [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "makeCommitment", name, owner, secret)
	return *ret0, err
}

// MakeCommitment is a free data retrieval call binding the contract method 0xf49826be.
//
// Solidity: function makeCommitment(string name, address owner, bytes32 secret) constant returns(bytes32)
func (_Fns *FnsSession) MakeCommitment(name string, owner common.Address, secret [32]byte) ([32]byte, error) {
	return _Fns.Contract.MakeCommitment(&_Fns.CallOpts, name, owner, secret)
}

// MakeCommitment is a free data retrieval call binding the contract method 0xf49826be.
//
// Solidity: function makeCommitment(string name, address owner, bytes32 secret) constant returns(bytes32)
func (_Fns *FnsCallerSession) MakeCommitment(name string, owner common.Address, secret [32]byte) ([32]byte, error) {
	return _Fns.Contract.MakeCommitment(&_Fns.CallOpts, name, owner, secret)
}

// MakeCommitmentWithConfig is a free data retrieval call binding the contract method 0x3d86c52f.
//
// Solidity: function makeCommitmentWithConfig(string name, address owner, bytes32 secret, address resolver, address addr) constant returns(bytes32)
func (_Fns *FnsCaller) MakeCommitmentWithConfig(opts *bind.CallOpts, name string, owner common.Address, secret [32]byte, resolver common.Address, addr common.Address) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "makeCommitmentWithConfig", name, owner, secret, resolver, addr)
	return *ret0, err
}

// MakeCommitmentWithConfig is a free data retrieval call binding the contract method 0x3d86c52f.
//
// Solidity: function makeCommitmentWithConfig(string name, address owner, bytes32 secret, address resolver, address addr) constant returns(bytes32)
func (_Fns *FnsSession) MakeCommitmentWithConfig(name string, owner common.Address, secret [32]byte, resolver common.Address, addr common.Address) ([32]byte, error) {
	return _Fns.Contract.MakeCommitmentWithConfig(&_Fns.CallOpts, name, owner, secret, resolver, addr)
}

// MakeCommitmentWithConfig is a free data retrieval call binding the contract method 0x3d86c52f.
//
// Solidity: function makeCommitmentWithConfig(string name, address owner, bytes32 secret, address resolver, address addr) constant returns(bytes32)
func (_Fns *FnsCallerSession) MakeCommitmentWithConfig(name string, owner common.Address, secret [32]byte, resolver common.Address, addr common.Address) ([32]byte, error) {
	return _Fns.Contract.MakeCommitmentWithConfig(&_Fns.CallOpts, name, owner, secret, resolver, addr)
}

// MaxCommitmentAge is a free data retrieval call binding the contract method 0xce1e09c0.
//
// Solidity: function maxCommitmentAge() constant returns(uint256)
func (_Fns *FnsCaller) MaxCommitmentAge(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "maxCommitmentAge")
	return *ret0, err
}

// MaxCommitmentAge is a free data retrieval call binding the contract method 0xce1e09c0.
//
// Solidity: function maxCommitmentAge() constant returns(uint256)
func (_Fns *FnsSession) MaxCommitmentAge() (*big.Int, error) {
	return _Fns.Contract.MaxCommitmentAge(&_Fns.CallOpts)
}

// MaxCommitmentAge is a free data retrieval call binding the contract method 0xce1e09c0.
//
// Solidity: function maxCommitmentAge() constant returns(uint256)
func (_Fns *FnsCallerSession) MaxCommitmentAge() (*big.Int, error) {
	return _Fns.Contract.MaxCommitmentAge(&_Fns.CallOpts)
}

// MinCommitmentAge is a free data retrieval call binding the contract method 0x8d839ffe.
//
// Solidity: function minCommitmentAge() constant returns(uint256)
func (_Fns *FnsCaller) MinCommitmentAge(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "minCommitmentAge")
	return *ret0, err
}

// MinCommitmentAge is a free data retrieval call binding the contract method 0x8d839ffe.
//
// Solidity: function minCommitmentAge() constant returns(uint256)
func (_Fns *FnsSession) MinCommitmentAge() (*big.Int, error) {
	return _Fns.Contract.MinCommitmentAge(&_Fns.CallOpts)
}

// MinCommitmentAge is a free data retrieval call binding the contract method 0x8d839ffe.
//
// Solidity: function minCommitmentAge() constant returns(uint256)
func (_Fns *FnsCallerSession) MinCommitmentAge() (*big.Int, error) {
	return _Fns.Contract.MinCommitmentAge(&_Fns.CallOpts)
}

// Namehash is a free data retrieval call binding the contract method 0x1d9273c7.
//
// Solidity: function namehash(bytes32 node, bytes32 label) constant returns(bytes32)
func (_Fns *FnsCaller) Namehash(opts *bind.CallOpts, node [32]byte, label [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "namehash", node, label)
	return *ret0, err
}

// Namehash is a free data retrieval call binding the contract method 0x1d9273c7.
//
// Solidity: function namehash(bytes32 node, bytes32 label) constant returns(bytes32)
func (_Fns *FnsSession) Namehash(node [32]byte, label [32]byte) ([32]byte, error) {
	return _Fns.Contract.Namehash(&_Fns.CallOpts, node, label)
}

// Namehash is a free data retrieval call binding the contract method 0x1d9273c7.
//
// Solidity: function namehash(bytes32 node, bytes32 label) constant returns(bytes32)
func (_Fns *FnsCallerSession) Namehash(node [32]byte, label [32]byte) ([32]byte, error) {
	return _Fns.Contract.Namehash(&_Fns.CallOpts, node, label)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Fns *FnsCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Fns *FnsSession) Owner() (common.Address, error) {
	return _Fns.Contract.Owner(&_Fns.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Fns *FnsCallerSession) Owner() (common.Address, error) {
	return _Fns.Contract.Owner(&_Fns.CallOpts)
}

// RentPrice is a free data retrieval call binding the contract method 0x83e7f6ff.
//
// Solidity: function rentPrice(string name, uint256 duration) constant returns(uint256)
func (_Fns *FnsCaller) RentPrice(opts *bind.CallOpts, name string, duration *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "rentPrice", name, duration)
	return *ret0, err
}

// RentPrice is a free data retrieval call binding the contract method 0x83e7f6ff.
//
// Solidity: function rentPrice(string name, uint256 duration) constant returns(uint256)
func (_Fns *FnsSession) RentPrice(name string, duration *big.Int) (*big.Int, error) {
	return _Fns.Contract.RentPrice(&_Fns.CallOpts, name, duration)
}

// RentPrice is a free data retrieval call binding the contract method 0x83e7f6ff.
//
// Solidity: function rentPrice(string name, uint256 duration) constant returns(uint256)
func (_Fns *FnsCallerSession) RentPrice(name string, duration *big.Int) (*big.Int, error) {
	return _Fns.Contract.RentPrice(&_Fns.CallOpts, name, duration)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) constant returns(bool)
func (_Fns *FnsCaller) SupportsInterface(opts *bind.CallOpts, interfaceID [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "supportsInterface", interfaceID)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) constant returns(bool)
func (_Fns *FnsSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Fns.Contract.SupportsInterface(&_Fns.CallOpts, interfaceID)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceID) constant returns(bool)
func (_Fns *FnsCallerSession) SupportsInterface(interfaceID [4]byte) (bool, error) {
	return _Fns.Contract.SupportsInterface(&_Fns.CallOpts, interfaceID)
}

// Valid is a free data retrieval call binding the contract method 0x9791c097.
//
// Solidity: function valid(string name) constant returns(bool)
func (_Fns *FnsCaller) Valid(opts *bind.CallOpts, name string) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Fns.contract.Call(opts, out, "valid", name)
	return *ret0, err
}

// Valid is a free data retrieval call binding the contract method 0x9791c097.
//
// Solidity: function valid(string name) constant returns(bool)
func (_Fns *FnsSession) Valid(name string) (bool, error) {
	return _Fns.Contract.Valid(&_Fns.CallOpts, name)
}

// Valid is a free data retrieval call binding the contract method 0x9791c097.
//
// Solidity: function valid(string name) constant returns(bool)
func (_Fns *FnsCallerSession) Valid(name string) (bool, error) {
	return _Fns.Contract.Valid(&_Fns.CallOpts, name)
}

// AddController is a paid mutator transaction binding the contract method 0xa7fc7a07.
//
// Solidity: function addController(address addr) returns()
func (_Fns *FnsTransactor) AddController(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "addController", addr)
}

func (_Fns *FnsTransactor) AsyncAddController(handler func(*types.Receipt, error), opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "addController", addr)
}

// AddController is a paid mutator transaction binding the contract method 0xa7fc7a07.
//
// Solidity: function addController(address addr) returns()
func (_Fns *FnsSession) AddController(addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.AddController(&_Fns.TransactOpts, addr)
}

func (_Fns *FnsSession) AsyncAddController(handler func(*types.Receipt, error), addr common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncAddController(handler, &_Fns.TransactOpts, addr)
}

// AddController is a paid mutator transaction binding the contract method 0xa7fc7a07.
//
// Solidity: function addController(address addr) returns()
func (_Fns *FnsTransactorSession) AddController(addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.AddController(&_Fns.TransactOpts, addr)
}

func (_Fns *FnsTransactorSession) AsyncAddController(handler func(*types.Receipt, error), addr common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncAddController(handler, &_Fns.TransactOpts, addr)
}

// Commit is a paid mutator transaction binding the contract method 0xf14fcbc8.
//
// Solidity: function commit(bytes32 commitment) returns()
func (_Fns *FnsTransactor) Commit(opts *bind.TransactOpts, commitment [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "commit", commitment)
}

func (_Fns *FnsTransactor) AsyncCommit(handler func(*types.Receipt, error), opts *bind.TransactOpts, commitment [32]byte) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "commit", commitment)
}

// Commit is a paid mutator transaction binding the contract method 0xf14fcbc8.
//
// Solidity: function commit(bytes32 commitment) returns()
func (_Fns *FnsSession) Commit(commitment [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Commit(&_Fns.TransactOpts, commitment)
}

func (_Fns *FnsSession) AsyncCommit(handler func(*types.Receipt, error), commitment [32]byte) (*types.Transaction, error) {
	return _Fns.Contract.AsyncCommit(handler, &_Fns.TransactOpts, commitment)
}

// Commit is a paid mutator transaction binding the contract method 0xf14fcbc8.
//
// Solidity: function commit(bytes32 commitment) returns()
func (_Fns *FnsTransactorSession) Commit(commitment [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Commit(&_Fns.TransactOpts, commitment)
}

func (_Fns *FnsTransactorSession) AsyncCommit(handler func(*types.Receipt, error), commitment [32]byte) (*types.Transaction, error) {
	return _Fns.Contract.AsyncCommit(handler, &_Fns.TransactOpts, commitment)
}

// Register is a paid mutator transaction binding the contract method 0x85f6d155.
//
// Solidity: function register(string name, address owner, uint256 duration, bytes32 secret) returns()
func (_Fns *FnsTransactor) Register(opts *bind.TransactOpts, name string, owner common.Address, duration *big.Int, secret [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "register", name, owner, duration, secret)
}

func (_Fns *FnsTransactor) AsyncRegister(handler func(*types.Receipt, error), opts *bind.TransactOpts, name string, owner common.Address, duration *big.Int, secret [32]byte) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "register", name, owner, duration, secret)
}

// Register is a paid mutator transaction binding the contract method 0x85f6d155.
//
// Solidity: function register(string name, address owner, uint256 duration, bytes32 secret) returns()
func (_Fns *FnsSession) Register(name string, owner common.Address, duration *big.Int, secret [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Register(&_Fns.TransactOpts, name, owner, duration, secret)
}

func (_Fns *FnsSession) AsyncRegister(handler func(*types.Receipt, error), name string, owner common.Address, duration *big.Int, secret [32]byte) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRegister(handler, &_Fns.TransactOpts, name, owner, duration, secret)
}

// Register is a paid mutator transaction binding the contract method 0x85f6d155.
//
// Solidity: function register(string name, address owner, uint256 duration, bytes32 secret) returns()
func (_Fns *FnsTransactorSession) Register(name string, owner common.Address, duration *big.Int, secret [32]byte) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Register(&_Fns.TransactOpts, name, owner, duration, secret)
}

func (_Fns *FnsTransactorSession) AsyncRegister(handler func(*types.Receipt, error), name string, owner common.Address, duration *big.Int, secret [32]byte) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRegister(handler, &_Fns.TransactOpts, name, owner, duration, secret)
}

// RegisterWithConfig is a paid mutator transaction binding the contract method 0xf7a16963.
//
// Solidity: function registerWithConfig(string name, address owner, uint256 duration, bytes32 secret, address resolver, address addr) returns()
func (_Fns *FnsTransactor) RegisterWithConfig(opts *bind.TransactOpts, name string, owner common.Address, duration *big.Int, secret [32]byte, resolver common.Address, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "registerWithConfig", name, owner, duration, secret, resolver, addr)
}

func (_Fns *FnsTransactor) AsyncRegisterWithConfig(handler func(*types.Receipt, error), opts *bind.TransactOpts, name string, owner common.Address, duration *big.Int, secret [32]byte, resolver common.Address, addr common.Address) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "registerWithConfig", name, owner, duration, secret, resolver, addr)
}

// RegisterWithConfig is a paid mutator transaction binding the contract method 0xf7a16963.
//
// Solidity: function registerWithConfig(string name, address owner, uint256 duration, bytes32 secret, address resolver, address addr) returns()
func (_Fns *FnsSession) RegisterWithConfig(name string, owner common.Address, duration *big.Int, secret [32]byte, resolver common.Address, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.RegisterWithConfig(&_Fns.TransactOpts, name, owner, duration, secret, resolver, addr)
}

func (_Fns *FnsSession) AsyncRegisterWithConfig(handler func(*types.Receipt, error), name string, owner common.Address, duration *big.Int, secret [32]byte, resolver common.Address, addr common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRegisterWithConfig(handler, &_Fns.TransactOpts, name, owner, duration, secret, resolver, addr)
}

// RegisterWithConfig is a paid mutator transaction binding the contract method 0xf7a16963.
//
// Solidity: function registerWithConfig(string name, address owner, uint256 duration, bytes32 secret, address resolver, address addr) returns()
func (_Fns *FnsTransactorSession) RegisterWithConfig(name string, owner common.Address, duration *big.Int, secret [32]byte, resolver common.Address, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.RegisterWithConfig(&_Fns.TransactOpts, name, owner, duration, secret, resolver, addr)
}

func (_Fns *FnsTransactorSession) AsyncRegisterWithConfig(handler func(*types.Receipt, error), name string, owner common.Address, duration *big.Int, secret [32]byte, resolver common.Address, addr common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRegisterWithConfig(handler, &_Fns.TransactOpts, name, owner, duration, secret, resolver, addr)
}

// RemoveController is a paid mutator transaction binding the contract method 0xf6a74ed7.
//
// Solidity: function removeController(address addr) returns()
func (_Fns *FnsTransactor) RemoveController(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "removeController", addr)
}

func (_Fns *FnsTransactor) AsyncRemoveController(handler func(*types.Receipt, error), opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "removeController", addr)
}

// RemoveController is a paid mutator transaction binding the contract method 0xf6a74ed7.
//
// Solidity: function removeController(address addr) returns()
func (_Fns *FnsSession) RemoveController(addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.RemoveController(&_Fns.TransactOpts, addr)
}

func (_Fns *FnsSession) AsyncRemoveController(handler func(*types.Receipt, error), addr common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRemoveController(handler, &_Fns.TransactOpts, addr)
}

// RemoveController is a paid mutator transaction binding the contract method 0xf6a74ed7.
//
// Solidity: function removeController(address addr) returns()
func (_Fns *FnsTransactorSession) RemoveController(addr common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.RemoveController(&_Fns.TransactOpts, addr)
}

func (_Fns *FnsTransactorSession) AsyncRemoveController(handler func(*types.Receipt, error), addr common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRemoveController(handler, &_Fns.TransactOpts, addr)
}

// Renew is a paid mutator transaction binding the contract method 0xacf1a841.
//
// Solidity: function renew(string name, uint256 duration) returns()
func (_Fns *FnsTransactor) Renew(opts *bind.TransactOpts, name string, duration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "renew", name, duration)
}

func (_Fns *FnsTransactor) AsyncRenew(handler func(*types.Receipt, error), opts *bind.TransactOpts, name string, duration *big.Int) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "renew", name, duration)
}

// Renew is a paid mutator transaction binding the contract method 0xacf1a841.
//
// Solidity: function renew(string name, uint256 duration) returns()
func (_Fns *FnsSession) Renew(name string, duration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Renew(&_Fns.TransactOpts, name, duration)
}

func (_Fns *FnsSession) AsyncRenew(handler func(*types.Receipt, error), name string, duration *big.Int) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRenew(handler, &_Fns.TransactOpts, name, duration)
}

// Renew is a paid mutator transaction binding the contract method 0xacf1a841.
//
// Solidity: function renew(string name, uint256 duration) returns()
func (_Fns *FnsTransactorSession) Renew(name string, duration *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Renew(&_Fns.TransactOpts, name, duration)
}

func (_Fns *FnsTransactorSession) AsyncRenew(handler func(*types.Receipt, error), name string, duration *big.Int) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRenew(handler, &_Fns.TransactOpts, name, duration)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Fns *FnsTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "renounceOwnership")
}

func (_Fns *FnsTransactor) AsyncRenounceOwnership(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Fns *FnsSession) RenounceOwnership() (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.RenounceOwnership(&_Fns.TransactOpts)
}

func (_Fns *FnsSession) AsyncRenounceOwnership(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRenounceOwnership(handler, &_Fns.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Fns *FnsTransactorSession) RenounceOwnership() (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.RenounceOwnership(&_Fns.TransactOpts)
}

func (_Fns *FnsTransactorSession) AsyncRenounceOwnership(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Fns.Contract.AsyncRenounceOwnership(handler, &_Fns.TransactOpts)
}

// SetCommitmentAges is a paid mutator transaction binding the contract method 0x7e324479.
//
// Solidity: function setCommitmentAges(uint256 _minCommitmentAge, uint256 _maxCommitmentAge) returns()
func (_Fns *FnsTransactor) SetCommitmentAges(opts *bind.TransactOpts, _minCommitmentAge *big.Int, _maxCommitmentAge *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "setCommitmentAges", _minCommitmentAge, _maxCommitmentAge)
}

func (_Fns *FnsTransactor) AsyncSetCommitmentAges(handler func(*types.Receipt, error), opts *bind.TransactOpts, _minCommitmentAge *big.Int, _maxCommitmentAge *big.Int) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "setCommitmentAges", _minCommitmentAge, _maxCommitmentAge)
}

// SetCommitmentAges is a paid mutator transaction binding the contract method 0x7e324479.
//
// Solidity: function setCommitmentAges(uint256 _minCommitmentAge, uint256 _maxCommitmentAge) returns()
func (_Fns *FnsSession) SetCommitmentAges(_minCommitmentAge *big.Int, _maxCommitmentAge *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.SetCommitmentAges(&_Fns.TransactOpts, _minCommitmentAge, _maxCommitmentAge)
}

func (_Fns *FnsSession) AsyncSetCommitmentAges(handler func(*types.Receipt, error), _minCommitmentAge *big.Int, _maxCommitmentAge *big.Int) (*types.Transaction, error) {
	return _Fns.Contract.AsyncSetCommitmentAges(handler, &_Fns.TransactOpts, _minCommitmentAge, _maxCommitmentAge)
}

// SetCommitmentAges is a paid mutator transaction binding the contract method 0x7e324479.
//
// Solidity: function setCommitmentAges(uint256 _minCommitmentAge, uint256 _maxCommitmentAge) returns()
func (_Fns *FnsTransactorSession) SetCommitmentAges(_minCommitmentAge *big.Int, _maxCommitmentAge *big.Int) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.SetCommitmentAges(&_Fns.TransactOpts, _minCommitmentAge, _maxCommitmentAge)
}

func (_Fns *FnsTransactorSession) AsyncSetCommitmentAges(handler func(*types.Receipt, error), _minCommitmentAge *big.Int, _maxCommitmentAge *big.Int) (*types.Transaction, error) {
	return _Fns.Contract.AsyncSetCommitmentAges(handler, &_Fns.TransactOpts, _minCommitmentAge, _maxCommitmentAge)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address _prices) returns()
func (_Fns *FnsTransactor) SetPriceOracle(opts *bind.TransactOpts, _prices common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "setPriceOracle", _prices)
}

func (_Fns *FnsTransactor) AsyncSetPriceOracle(handler func(*types.Receipt, error), opts *bind.TransactOpts, _prices common.Address) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "setPriceOracle", _prices)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address _prices) returns()
func (_Fns *FnsSession) SetPriceOracle(_prices common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.SetPriceOracle(&_Fns.TransactOpts, _prices)
}

func (_Fns *FnsSession) AsyncSetPriceOracle(handler func(*types.Receipt, error), _prices common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncSetPriceOracle(handler, &_Fns.TransactOpts, _prices)
}

// SetPriceOracle is a paid mutator transaction binding the contract method 0x530e784f.
//
// Solidity: function setPriceOracle(address _prices) returns()
func (_Fns *FnsTransactorSession) SetPriceOracle(_prices common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.SetPriceOracle(&_Fns.TransactOpts, _prices)
}

func (_Fns *FnsTransactorSession) AsyncSetPriceOracle(handler func(*types.Receipt, error), _prices common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncSetPriceOracle(handler, &_Fns.TransactOpts, _prices)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Fns *FnsTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "transferOwnership", newOwner)
}

func (_Fns *FnsTransactor) AsyncTransferOwnership(handler func(*types.Receipt, error), opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Fns *FnsSession) TransferOwnership(newOwner common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.TransferOwnership(&_Fns.TransactOpts, newOwner)
}

func (_Fns *FnsSession) AsyncTransferOwnership(handler func(*types.Receipt, error), newOwner common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncTransferOwnership(handler, &_Fns.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Fns *FnsTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.TransferOwnership(&_Fns.TransactOpts, newOwner)
}

func (_Fns *FnsTransactorSession) AsyncTransferOwnership(handler func(*types.Receipt, error), newOwner common.Address) (*types.Transaction, error) {
	return _Fns.Contract.AsyncTransferOwnership(handler, &_Fns.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Fns *FnsTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, *types.Receipt, error) {
	return _Fns.contract.Transact(opts, "withdraw")
}

func (_Fns *FnsTransactor) AsyncWithdraw(handler func(*types.Receipt, error), opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Fns.contract.AsyncTransact(opts, handler, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Fns *FnsSession) Withdraw() (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Withdraw(&_Fns.TransactOpts)
}

func (_Fns *FnsSession) AsyncWithdraw(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Fns.Contract.AsyncWithdraw(handler, &_Fns.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_Fns *FnsTransactorSession) Withdraw() (*types.Transaction, *types.Receipt, error) {
	return _Fns.Contract.Withdraw(&_Fns.TransactOpts)
}

func (_Fns *FnsTransactorSession) AsyncWithdraw(handler func(*types.Receipt, error)) (*types.Transaction, error) {
	return _Fns.Contract.AsyncWithdraw(handler, &_Fns.TransactOpts)
}

// FnsNameRegisteredIterator is returned from FilterNameRegistered and is used to iterate over the raw logs and unpacked data for NameRegistered events raised by the Fns contract.
type FnsNameRegisteredIterator struct {
	Event *FnsNameRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FnsNameRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FnsNameRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FnsNameRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FnsNameRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FnsNameRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FnsNameRegistered represents a NameRegistered event raised by the Fns contract.
type FnsNameRegistered struct {
	Name    string
	Label   [32]byte
	Owner   common.Address
	Cost    *big.Int
	Expires *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNameRegistered is a free log retrieval operation binding the contract event 0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f.
//
// Solidity: event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint256 cost, uint256 expires)
func (_Fns *FnsFilterer) FilterNameRegistered(opts *bind.FilterOpts, label [][32]byte, owner []common.Address) (*FnsNameRegisteredIterator, error) {

	var labelRule []interface{}
	for _, labelItem := range label {
		labelRule = append(labelRule, labelItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Fns.contract.FilterLogs(opts, "NameRegistered", labelRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &FnsNameRegisteredIterator{contract: _Fns.contract, event: "NameRegistered", logs: logs, sub: sub}, nil
}

// WatchNameRegistered is a free log subscription operation binding the contract event 0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f.
//
// Solidity: event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint256 cost, uint256 expires)
func (_Fns *FnsFilterer) WatchNameRegistered(opts *bind.WatchOpts, sink chan<- *FnsNameRegistered, label [][32]byte, owner []common.Address) (event.Subscription, error) {

	var labelRule []interface{}
	for _, labelItem := range label {
		labelRule = append(labelRule, labelItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Fns.contract.WatchLogs(opts, "NameRegistered", labelRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FnsNameRegistered)
				if err := _Fns.contract.UnpackLog(event, "NameRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNameRegistered is a log parse operation binding the contract event 0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f.
//
// Solidity: event NameRegistered(string name, bytes32 indexed label, address indexed owner, uint256 cost, uint256 expires)
func (_Fns *FnsFilterer) ParseNameRegistered(log types.Log) (*FnsNameRegistered, error) {
	event := new(FnsNameRegistered)
	if err := _Fns.contract.UnpackLog(event, "NameRegistered", log); err != nil {
		return nil, err
	}
	return event, nil
}

// FnsNameRenewedIterator is returned from FilterNameRenewed and is used to iterate over the raw logs and unpacked data for NameRenewed events raised by the Fns contract.
type FnsNameRenewedIterator struct {
	Event *FnsNameRenewed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FnsNameRenewedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FnsNameRenewed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FnsNameRenewed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FnsNameRenewedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FnsNameRenewedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FnsNameRenewed represents a NameRenewed event raised by the Fns contract.
type FnsNameRenewed struct {
	Name    string
	Label   [32]byte
	Cost    *big.Int
	Expires *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNameRenewed is a free log retrieval operation binding the contract event 0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae.
//
// Solidity: event NameRenewed(string name, bytes32 indexed label, uint256 cost, uint256 expires)
func (_Fns *FnsFilterer) FilterNameRenewed(opts *bind.FilterOpts, label [][32]byte) (*FnsNameRenewedIterator, error) {

	var labelRule []interface{}
	for _, labelItem := range label {
		labelRule = append(labelRule, labelItem)
	}

	logs, sub, err := _Fns.contract.FilterLogs(opts, "NameRenewed", labelRule)
	if err != nil {
		return nil, err
	}
	return &FnsNameRenewedIterator{contract: _Fns.contract, event: "NameRenewed", logs: logs, sub: sub}, nil
}

// WatchNameRenewed is a free log subscription operation binding the contract event 0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae.
//
// Solidity: event NameRenewed(string name, bytes32 indexed label, uint256 cost, uint256 expires)
func (_Fns *FnsFilterer) WatchNameRenewed(opts *bind.WatchOpts, sink chan<- *FnsNameRenewed, label [][32]byte) (event.Subscription, error) {

	var labelRule []interface{}
	for _, labelItem := range label {
		labelRule = append(labelRule, labelItem)
	}

	logs, sub, err := _Fns.contract.WatchLogs(opts, "NameRenewed", labelRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FnsNameRenewed)
				if err := _Fns.contract.UnpackLog(event, "NameRenewed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNameRenewed is a log parse operation binding the contract event 0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae.
//
// Solidity: event NameRenewed(string name, bytes32 indexed label, uint256 cost, uint256 expires)
func (_Fns *FnsFilterer) ParseNameRenewed(log types.Log) (*FnsNameRenewed, error) {
	event := new(FnsNameRenewed)
	if err := _Fns.contract.UnpackLog(event, "NameRenewed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// FnsNewPriceOracleIterator is returned from FilterNewPriceOracle and is used to iterate over the raw logs and unpacked data for NewPriceOracle events raised by the Fns contract.
type FnsNewPriceOracleIterator struct {
	Event *FnsNewPriceOracle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FnsNewPriceOracleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FnsNewPriceOracle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FnsNewPriceOracle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FnsNewPriceOracleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FnsNewPriceOracleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FnsNewPriceOracle represents a NewPriceOracle event raised by the Fns contract.
type FnsNewPriceOracle struct {
	Oracle common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNewPriceOracle is a free log retrieval operation binding the contract event 0xf261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e9123.
//
// Solidity: event NewPriceOracle(address indexed oracle)
func (_Fns *FnsFilterer) FilterNewPriceOracle(opts *bind.FilterOpts, oracle []common.Address) (*FnsNewPriceOracleIterator, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _Fns.contract.FilterLogs(opts, "NewPriceOracle", oracleRule)
	if err != nil {
		return nil, err
	}
	return &FnsNewPriceOracleIterator{contract: _Fns.contract, event: "NewPriceOracle", logs: logs, sub: sub}, nil
}

// WatchNewPriceOracle is a free log subscription operation binding the contract event 0xf261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e9123.
//
// Solidity: event NewPriceOracle(address indexed oracle)
func (_Fns *FnsFilterer) WatchNewPriceOracle(opts *bind.WatchOpts, sink chan<- *FnsNewPriceOracle, oracle []common.Address) (event.Subscription, error) {

	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}

	logs, sub, err := _Fns.contract.WatchLogs(opts, "NewPriceOracle", oracleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FnsNewPriceOracle)
				if err := _Fns.contract.UnpackLog(event, "NewPriceOracle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPriceOracle is a log parse operation binding the contract event 0xf261845a790fe29bbd6631e2ca4a5bdc83e6eed7c3271d9590d97287e00e9123.
//
// Solidity: event NewPriceOracle(address indexed oracle)
func (_Fns *FnsFilterer) ParseNewPriceOracle(log types.Log) (*FnsNewPriceOracle, error) {
	event := new(FnsNewPriceOracle)
	if err := _Fns.contract.UnpackLog(event, "NewPriceOracle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// FnsOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Fns contract.
type FnsOwnershipTransferredIterator struct {
	Event *FnsOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FnsOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FnsOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FnsOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FnsOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FnsOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FnsOwnershipTransferred represents a OwnershipTransferred event raised by the Fns contract.
type FnsOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Fns *FnsFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FnsOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Fns.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FnsOwnershipTransferredIterator{contract: _Fns.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Fns *FnsFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FnsOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Fns.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FnsOwnershipTransferred)
				if err := _Fns.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Fns *FnsFilterer) ParseOwnershipTransferred(log types.Log) (*FnsOwnershipTransferred, error) {
	event := new(FnsOwnershipTransferred)
	if err := _Fns.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}
